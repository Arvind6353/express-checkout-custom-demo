<% include partials/headers/header-jsv4.ejs %>

    <div class="container-fluid ">

        <div class="row">
            <div class="col-lg-6 col-md-4 col-sm-12 portfolio-item c1 text-center">
                <% include partials/customizeform.ejs %>
            </div>

            <div class="col-lg-6 col-md-3 col-sm-12 portfolio-item c1 text-center">
                <div id="column-middle1" style="margin-top:10%;height:100%">
                    <legend>View the checkout experience</legend>
                    <div class="text-left">
                        <% include partials/sourcecode.ejs %>
                    </div>
                    <div class="alert alert-info">
                        <strong>Mark Flow Server Checkout Flow</strong>
                    </div>

                    <% include partials/product.ejs %>

                        <div class="row" style="margin-top:1%" id="shortFlow">
                            <div id="code" class="markintg">

                                <div id="paypal-button-container"></div>
                                <br/>
                                <div id="markFlowBtn" class="btn btn-warning btn-sm" onClick="switchFlows()">Proceed to Checkout</div>

                                <br/>
                                <div id="paypal-button-container-err"></div>
                            </div>
                            <br/>
                            <button type="button" class="btn btn-primary btn-md openBtn" id="viewSC">View Source Code</button>
                        </div>

                        <div class="row" style="margin-top:1%;display:none" id="markFlow">
                            <% include partials/markflow-form-server.ejs %>
                        </div>


                </div>
            </div>

        </div>
        <!-- end of row -->

    </div>
    <!-- end of container -->
    <script>
        // handle loading of source code inside modal body
        $(document).ready(function () {
            $('.openBtn').on('click', function () {
                $('.modal-body').load('server/editor/markflow.html', function () {
                    $('#myModal').modal({
                        show: true
                    });
                });
            });
        })

        function switchFlows() {
            $("#shortFlow").hide();
            $("#markFlow").show();
        }
        // Helper functions

        function getElements(el) {
            return Array.prototype.slice.call(document.querySelectorAll(el));
        }

        function hideElement(el) {
            document.body.querySelector(el).style.display = 'none';
        }

        function showElement(el) {
            document.body.querySelector(el).style.display = 'block';
        }

        // Listen for changes to the radio fields

        getElements('input[name=payment-option]').forEach(function (el) {
            el.addEventListener('change', function (event) {

                // If PayPal is selected, show the PayPal button

                if (event.target.value === 'paypal') {
                    hideElement('#card-button-container');
                    showElement('#paypal-button-container-mark');
                }

                // If Card is selected, show the standard continue button

                if (event.target.value === 'card') {
                    showElement('#card-button-container');
                    hideElement('#paypal-button-container-mark');
                }
            });
        });

        // Hide Non-PayPal button by default

        hideElement('#card-button-container');

        function createCheckoutExp(chkObj) {
            var CREATE_PAYMENT_URL = "/api/server/payment"
            var EXECUTE_PAYMENT_URL = "/api/server/payment-execute"

            var paymentPayload = {
                clientId: $("#clientId").val(),
                clientSecret:  $("#clientSecret").val(),
                mode: $("#environment").val(),
                intent: "sale",
                payer: {
                    payment_method: "paypal"
                },
                redirect_urls: {
                    return_url: serverUrl + "/api/server/success",
                    cancel_url: serverUrl + "/api/server/cancel"
                },
                transactions: [{
                    amount: {
                        total: "4.00",
                        currency: "USD",
                        details: {
                            subtotal: "2.00",
                            shipping: "1.00",
                            tax: "2.00",
                            shipping_discount: "-1.00"
                        }
                    },
                    item_list: {
                        items: [{
                                quantity: "1",
                                name: "item 1",
                                price: "1",
                                currency: "USD",
                                description: "item 1 description",
                                tax: "1"
                            },
                            {
                                quantity: "1",
                                name: "item 2",
                                price: "1",
                                currency: "USD",
                                description: "item 2 description",
                                tax: "1"
                            }
                        ]
                    }
                }]

            };

            var obj = {
                payment: function (data, actions) {
                    document.getElementById("paypal-button-container-err").innerHTML = "";
                    // call server to create payment

                    return paypal.request({
                        method: 'post',
                        url: CREATE_PAYMENT_URL,
                        json: paymentPayload
                    }).then(function (data) {
                        if (data.error) {
                            document.getElementById("paypal-button-container-err").innerHTML =
                                "<p style='color:red'>" + JSON.stringify(data.error) + "</p>";
                            return;
                        }
                        return data.id;
                    });
                },
                onAuthorize: function (data, actions) {
                    // call server to execute payment
                    return paypal.request.post(EXECUTE_PAYMENT_URL, {
                        paymentID: data.paymentID,
                        payerID: data.payerID
                    }).then(function (payment) {
                        if (payment.error) {
                            document.getElementById("paypal-button-container-err").innerHTML =
                                "<p style='color:red'>" + JSON.stringify(payment.error) + "</p>";
                            return;
                        }
                        window.alert("Payment is Complete and Payment Id : " + payment.id);
                    });
                },
                onCancel: function () {
                    window.alert("You have cancelled");
                    return;
                },
                onError: function (err) {
                    $("#viewSC").hide();
                    document.getElementById("paypal-button-container-err").innerHTML += "<p style='color:red'>" +
                        err + "</p>";
                    return false;
                }
            };

            paypal.Button.render(Object.assign({}, obj, chkObj), '#paypal-button-container');
            createCheckoutExpMarkServer(chkObj);
        }
    </script>
    <script src="/javascripts/formhandling.js"></script>
    </body>

    </html>